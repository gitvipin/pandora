<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthGrpcContext" kind="class" language="C++" prot="public">
    <compoundname>nvidia::inferenceserver::client::ServerHealthGrpcContext</compoundname>
    <basecompoundref refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext" prot="public" virt="non-virtual">nvidia::inferenceserver::client::ServerHealthContext</basecompoundref>
    <includes refid="request_8h" local="no">request.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthGrpcContext_1a2badfd47318e3b8839611c4b3fadc22d" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; GRPCService::Stub &gt;</type>
        <definition>std::unique_ptr&lt;GRPCService::Stub&gt; nvidia::inferenceserver::client::ServerHealthGrpcContext::stub_</definition>
        <argsstring></argsstring>
        <name>stub_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/clients/c++/request.h" line="1017" column="1" bodyfile="src/clients/c++/request.h" bodystart="1017" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthGrpcContext_1a2929e161d9d4886b48423a48eb83e21a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnvidia_1_1inferenceserver_1_1client_1_1Error" kindref="compound">Error</ref></type>
        <definition>static Error nvidia::inferenceserver::client::ServerHealthGrpcContext::Create</definition>
        <argsstring>(std::unique_ptr&lt; ServerHealthContext &gt; *ctx, const std::string &amp;server_url, bool verbose=false)</argsstring>
        <name>Create</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext" kindref="compound">ServerHealthContext</ref> &gt; *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>server_url</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Create a context that returns health information about server. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns a new <ref refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthGrpcContext" kindref="compound">ServerHealthGrpcContext</ref> object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>server_url</parametername>
</parameternamelist>
<parameterdescription>
<para>The inference server name and port. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbose</parametername>
</parameternamelist>
<parameterdescription>
<para>If true generate verbose output when contacting the inference server. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnvidia_1_1inferenceserver_1_1client_1_1Error" kindref="compound">Error</ref> object indicating success or failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/clients/c++/request.h" line="1005" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthGrpcContext_1ab7eb83267e0b344b688afd3b70c1498d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classnvidia_1_1inferenceserver_1_1client_1_1Error" kindref="compound">Error</ref></type>
        <definition>Error nvidia::inferenceserver::client::ServerHealthGrpcContext::GetReady</definition>
        <argsstring>(bool *ready) override</argsstring>
        <name>GetReady</name>
        <reimplements refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext_1a487bfc16d869317d0f4cb93144311054">GetReady</reimplements>
        <param>
          <type>bool *</type>
          <declname>ready</declname>
        </param>
        <briefdescription>
<para>Contact the inference server and get readiness state. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ready</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns the readiness state of the server. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnvidia_1_1inferenceserver_1_1client_1_1Error" kindref="compound">Error</ref> object indicating success or failure of the request. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/clients/c++/request.h" line="1009" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthGrpcContext_1a6015f1c052eb2a7a8d161a128d8c62b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classnvidia_1_1inferenceserver_1_1client_1_1Error" kindref="compound">Error</ref></type>
        <definition>Error nvidia::inferenceserver::client::ServerHealthGrpcContext::GetLive</definition>
        <argsstring>(bool *live) override</argsstring>
        <name>GetLive</name>
        <reimplements refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext_1abf7c75af3e61a2f92b481c47b0617c9c">GetLive</reimplements>
        <param>
          <type>bool *</type>
          <declname>live</declname>
        </param>
        <briefdescription>
<para>Contact the inference server and get liveness state. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ready</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns the liveness state of the server. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnvidia_1_1inferenceserver_1_1client_1_1Error" kindref="compound">Error</ref> object indicating success or failure of the request. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/clients/c++/request.h" line="1010" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthGrpcContext_1aa70bf21271a1e54737b1e105d8b8a566" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nvidia::inferenceserver::client::ServerHealthGrpcContext::ServerHealthGrpcContext</definition>
        <argsstring>(const std::string &amp;, bool)</argsstring>
        <name>ServerHealthGrpcContext</name>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/clients/c++/request.h" line="1013" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthGrpcContext_1a2de86e7a9dd37ef16c90f57270073950" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnvidia_1_1inferenceserver_1_1client_1_1Error" kindref="compound">Error</ref></type>
        <definition>Error nvidia::inferenceserver::client::ServerHealthGrpcContext::GetHealth</definition>
        <argsstring>(const std::string &amp;mode, bool *health)</argsstring>
        <name>GetHealth</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>health</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/clients/c++/request.h" line="1014" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthGrpcContext" kindref="compound">ServerHealthGrpcContext</ref> is the GRPC instantiation of <ref refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext" kindref="compound">ServerHealthContext</ref>. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="138">
        <label>nvidia::inferenceserver::client::ServerHealthGrpcContext</label>
        <link refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthGrpcContext"/>
        <childnode refid="139" relation="public-inheritance">
        </childnode>
      </node>
      <node id="139">
        <label>nvidia::inferenceserver::client::ServerHealthContext</label>
        <link refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="140">
        <label>nvidia::inferenceserver::client::ServerHealthGrpcContext</label>
        <link refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthGrpcContext"/>
        <childnode refid="141" relation="public-inheritance">
        </childnode>
      </node>
      <node id="141">
        <label>nvidia::inferenceserver::client::ServerHealthContext</label>
        <link refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext"/>
      </node>
    </collaborationgraph>
    <location file="src/clients/c++/request.h" line="997" column="1" bodyfile="src/clients/c++/request.h" bodystart="997" bodyend="1018"/>
    <listofallmembers>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthGrpcContext_1a2929e161d9d4886b48423a48eb83e21a" prot="public" virt="non-virtual"><scope>nvidia::inferenceserver::client::ServerHealthGrpcContext</scope><name>Create</name></member>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthGrpcContext_1a2de86e7a9dd37ef16c90f57270073950" prot="private" virt="non-virtual"><scope>nvidia::inferenceserver::client::ServerHealthGrpcContext</scope><name>GetHealth</name></member>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthGrpcContext_1a6015f1c052eb2a7a8d161a128d8c62b1" prot="public" virt="virtual"><scope>nvidia::inferenceserver::client::ServerHealthGrpcContext</scope><name>GetLive</name></member>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthGrpcContext_1ab7eb83267e0b344b688afd3b70c1498d" prot="public" virt="virtual"><scope>nvidia::inferenceserver::client::ServerHealthGrpcContext</scope><name>GetReady</name></member>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext_1ac70a31c16337c59f1ace99658a7e8d37" prot="protected" virt="non-virtual"><scope>nvidia::inferenceserver::client::ServerHealthGrpcContext</scope><name>ServerHealthContext</name></member>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthGrpcContext_1aa70bf21271a1e54737b1e105d8b8a566" prot="private" virt="non-virtual"><scope>nvidia::inferenceserver::client::ServerHealthGrpcContext</scope><name>ServerHealthGrpcContext</name></member>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthGrpcContext_1a2badfd47318e3b8839611c4b3fadc22d" prot="private" virt="non-virtual"><scope>nvidia::inferenceserver::client::ServerHealthGrpcContext</scope><name>stub_</name></member>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext_1a85f64722e02a0a62a76984e10e4c43d4" prot="protected" virt="non-virtual"><scope>nvidia::inferenceserver::client::ServerHealthGrpcContext</scope><name>verbose_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
