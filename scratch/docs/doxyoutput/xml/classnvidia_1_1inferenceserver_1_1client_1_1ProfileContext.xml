<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>nvidia::inferenceserver::client::ProfileContext</compoundname>
    <derivedcompoundref refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileGrpcContext" prot="public" virt="non-virtual">nvidia::inferenceserver::client::ProfileGrpcContext</derivedcompoundref>
    <derivedcompoundref refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileHttpContext" prot="public" virt="non-virtual">nvidia::inferenceserver::client::ProfileHttpContext</derivedcompoundref>
    <includes refid="request_8h" local="no">request.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext_1a37bff4c6755f5c2be784b195658781e0" prot="protected" static="no" mutable="no">
        <type>const bool</type>
        <definition>const bool nvidia::inferenceserver::client::ProfileContext::verbose_</definition>
        <argsstring></argsstring>
        <name>verbose_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/clients/c++/request.h" line="806" column="1" bodyfile="src/clients/c++/request.h" bodystart="806" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext_1a1ab52943642937237a61474900c3e063" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnvidia_1_1inferenceserver_1_1client_1_1Error" kindref="compound">Error</ref></type>
        <definition>Error nvidia::inferenceserver::client::ProfileContext::StartProfile</definition>
        <argsstring>()</argsstring>
        <name>StartProfile</name>
        <briefdescription>
<para>Start profiling on the inference server. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classnvidia_1_1inferenceserver_1_1client_1_1Error" kindref="compound">Error</ref> object indicating success or failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/clients/c++/request.h" line="795" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext_1a70de85f4829ce4042c3696a3fdf2f091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnvidia_1_1inferenceserver_1_1client_1_1Error" kindref="compound">Error</ref></type>
        <definition>Error nvidia::inferenceserver::client::ProfileContext::StopProfile</definition>
        <argsstring>()</argsstring>
        <name>StopProfile</name>
        <briefdescription>
<para>Stop profiling on the inference server. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/clients/c++/request.h" line="799" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext_1a7781bbb5753b2fe3df63b2c67f481bda" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nvidia::inferenceserver::client::ProfileContext::ProfileContext</definition>
        <argsstring>(bool)</argsstring>
        <name>ProfileContext</name>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/clients/c++/request.h" line="802" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext_1a9e56d2aaa5f73cbc20a17c189cdbecff" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classnvidia_1_1inferenceserver_1_1client_1_1Error" kindref="compound">Error</ref></type>
        <definition>virtual Error nvidia::inferenceserver::client::ProfileContext::SendCommand</definition>
        <argsstring>(const std::string &amp;cmd_str)=0</argsstring>
        <name>SendCommand</name>
        <reimplementedby refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileHttpContext_1aa7528d100f641dd78b9ccb14c439330f">SendCommand</reimplementedby>
        <reimplementedby refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileGrpcContext_1a7565ede170689175cb6236801716dc3f">SendCommand</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>cmd_str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/clients/c++/request.h" line="803" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext" kindref="compound">ProfileContext</ref> object is used to control profiling on the inference server. </para>    </briefdescription>
    <detaileddescription>
<para>Once created a <ref refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext" kindref="compound">ProfileContext</ref> object can be used repeatedly.</para><para>A <ref refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext" kindref="compound">ProfileContext</ref> object can use either HTTP protocol or GRPC protocol depending on the Create function (<ref refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileHttpContext_1a5a4cab76d0a3f8af074883be690ca8d5" kindref="member">ProfileHttpContext::Create</ref> or <ref refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileGrpcContext_1aea9bbc1359b9e491afcbe066386a8baa" kindref="member">ProfileGrpcContext::Create</ref>). For example:</para><para><programlisting><codeline><highlight class="normal">std::unique_ptr&lt;ProfileContext&gt;<sp/>ctx;</highlight></codeline>
<codeline><highlight class="normal">ProfileGrpcContext::Create(&amp;ctx,<sp/>&quot;localhost:8000&quot;);</highlight></codeline>
<codeline><highlight class="normal">ctx-&gt;StartProfile();</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">ctx-&gt;StopProfile();</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>ProfileContext::Create methods are thread-safe. StartProfiling() and StopProfiling() are not thread-safe. For a given <ref refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext" kindref="compound">ProfileContext</ref>, calls to these methods must be serialized. </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="117">
        <label>nvidia::inferenceserver::client::ProfileGrpcContext</label>
        <link refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileGrpcContext"/>
        <childnode refid="116" relation="public-inheritance">
        </childnode>
      </node>
      <node id="118">
        <label>nvidia::inferenceserver::client::ProfileHttpContext</label>
        <link refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileHttpContext"/>
        <childnode refid="116" relation="public-inheritance">
        </childnode>
      </node>
      <node id="116">
        <label>nvidia::inferenceserver::client::ProfileContext</label>
        <link refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext"/>
      </node>
    </inheritancegraph>
    <location file="src/clients/c++/request.h" line="791" column="1" bodyfile="src/clients/c++/request.h" bodystart="791" bodyend="807"/>
    <listofallmembers>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext_1a7781bbb5753b2fe3df63b2c67f481bda" prot="protected" virt="non-virtual"><scope>nvidia::inferenceserver::client::ProfileContext</scope><name>ProfileContext</name></member>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext_1a9e56d2aaa5f73cbc20a17c189cdbecff" prot="protected" virt="pure-virtual"><scope>nvidia::inferenceserver::client::ProfileContext</scope><name>SendCommand</name></member>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext_1a1ab52943642937237a61474900c3e063" prot="public" virt="non-virtual"><scope>nvidia::inferenceserver::client::ProfileContext</scope><name>StartProfile</name></member>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext_1a70de85f4829ce4042c3696a3fdf2f091" prot="public" virt="non-virtual"><scope>nvidia::inferenceserver::client::ProfileContext</scope><name>StopProfile</name></member>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext_1a37bff4c6755f5c2be784b195658781e0" prot="protected" virt="non-virtual"><scope>nvidia::inferenceserver::client::ProfileContext</scope><name>verbose_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
