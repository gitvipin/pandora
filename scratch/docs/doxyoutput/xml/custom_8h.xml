<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="custom_8h" kind="file" language="C++">
    <compoundname>custom.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdint.h</includes>
    <incdepgraph>
      <node id="36">
        <label>stdint.h</label>
      </node>
      <node id="34">
        <label>src/servables/custom/custom.h</label>
        <link refid="custom.h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structcustom__payload__struct" prot="public">custom_payload_struct</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="custom_8h_1aaf537da73bb55fda05fb4e39defe1949" prot="public" static="no">
        <name>CUSTOM_NO_GPU_DEVICE</name>
        <initializer>-1</initializer>
        <briefdescription>
<para>GPU device number that indicates that no GPU is available for a context. </para>        </briefdescription>
        <detaileddescription>
<para>In CustomInitialize this value is used for &apos;gpu_device_id&apos; to indicate that the model must execute on the CPU. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/servables/custom/custom.h" line="38" column="9" bodyfile="src/servables/custom/custom.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="custom_8h_1a99a7b9dcc756702784a869d9afb59df4" prot="public" static="no">
        <type>struct <ref refid="structcustom__payload__struct" kindref="compound">custom_payload_struct</ref></type>
        <definition>typedef struct custom_payload_struct  CustomPayload</definition>
        <argsstring></argsstring>
        <name>CustomPayload</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/servables/custom/custom.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="custom_8h_1aee3723f1a17ff4664691655e056a309c" prot="public" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* CustomGetNextInputFn_t) (void *input_context, const char *name, const void **content, uint64_t *content_byte_size)</definition>
        <argsstring>)(void *input_context, const char *name, const void **content, uint64_t *content_byte_size)</argsstring>
        <name>CustomGetNextInputFn_t</name>
        <briefdescription>
<para>Type for the CustomGetNextInput callback function. </para>        </briefdescription>
        <detaileddescription>
<para>This callback function is provided in the call to ComputeExecute and is used to get the value of the input tensors. Each call to this function returns a contiguous block of the input tensor value. The entire tensor value may be in multiple non-contiguous blocks and so this function must be called multiple times until &apos;content&apos; returns nullptr.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_context</parametername>
</parameternamelist>
<parameterdescription>
<para>The input context provided in call to CustomExecute. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the input tensor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns a pointer to the next contiguous block of content for the named input. Returns nullptr if there is no more content for the input. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content_byte_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Acts as both input and output. On input gives the maximum size expected for &apos;content&apos;. Returns the actual size, in bytes, of &apos;content&apos;. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if error, true if success. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/servables/custom/custom.h" line="102" column="1" bodyfile="src/servables/custom/custom.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="custom_8h_1a71cb419d6e7feee902115438973d02f8" prot="public" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* CustomGetOutputFn_t) (void *output_context, const char *name, size_t shape_dim_cnt, int64_t *shape_dims, uint64_t content_byte_size, void **content)</definition>
        <argsstring>)(void *output_context, const char *name, size_t shape_dim_cnt, int64_t *shape_dims, uint64_t content_byte_size, void **content)</argsstring>
        <name>CustomGetOutputFn_t</name>
        <briefdescription>
<para>Type for the CustomGetOutput callback function. </para>        </briefdescription>
        <detaileddescription>
<para>This callback function is provided in the call to ComputeExecute and is used to report the shape of an output and to get the buffers to store the output tensor values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output_context</parametername>
</parameternamelist>
<parameterdescription>
<para>The output context provided in call to CustomExecute. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the output tensor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shape_dim_cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of dimensions in the output shape. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shape_dims</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions of the output shape. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content_byte_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size, in bytes, of the output tensor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns a pointer to a buffer where the output for the tensor should be copied. If nullptr and function returns true (no error), then the output should not be written and the backend should continue to the next output. If non-nullptr, the size of the buffer will be large enough to hold &apos;content_byte_size&apos; bytes. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if error, true if success. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/servables/custom/custom.h" line="124" column="1" bodyfile="src/servables/custom/custom.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="custom_8h_1a11fea108abb0b28f86a96e6b7cd92a20" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* CustomInitializeFn_t) (const char *, size_t, int, void **)</definition>
        <argsstring>)(const char *, size_t, int, void **)</argsstring>
        <name>CustomInitializeFn_t</name>
        <briefdescription>
<para>Type for the CustomInitialize function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/servables/custom/custom.h" line="129" column="1" bodyfile="src/servables/custom/custom.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="custom_8h_1aa32f51734df1f217cc7c2b07f31f8f3f" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* CustomFinalizeFn_t) (void *)</definition>
        <argsstring>)(void *)</argsstring>
        <name>CustomFinalizeFn_t</name>
        <briefdescription>
<para>Type for the CustomFinalize function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/servables/custom/custom.h" line="132" column="1" bodyfile="src/servables/custom/custom.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="custom_8h_1aa6616d50105d3441ba277c6dbce66286" prot="public" static="no">
        <type>char *(*</type>
        <definition>typedef char*(* CustomErrorStringFn_t) (void *, int)</definition>
        <argsstring>)(void *, int)</argsstring>
        <name>CustomErrorStringFn_t</name>
        <briefdescription>
<para>Type for the CustomErrorString function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/servables/custom/custom.h" line="135" column="1" bodyfile="src/servables/custom/custom.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="custom_8h_1ac0c3508cd00e9db56912ff40deecf9d2" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* CustomExecuteFn_t) (void *, uint32_t, CustomPayload *, CustomGetNextInputFn_t, CustomGetOutputFn_t)</definition>
        <argsstring>)(void *, uint32_t, CustomPayload *, CustomGetNextInputFn_t, CustomGetOutputFn_t)</argsstring>
        <name>CustomExecuteFn_t</name>
        <briefdescription>
<para>Type for the CustomExecute function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/servables/custom/custom.h" line="138" column="1" bodyfile="src/servables/custom/custom.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="custom_8h_1ad384f6af9bfb11b82b2b4e411f799b6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CustomInitialize</definition>
        <argsstring>(const char *serialized_model_config, size_t serialized_model_config_size, int gpu_device_id, void **custom_context)</argsstring>
        <name>CustomInitialize</name>
        <param>
          <type>const char *</type>
          <declname>serialized_model_config</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>serialized_model_config_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gpu_device_id</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>custom_context</declname>
        </param>
        <briefdescription>
<para>Initialize the custom shared library for a given model configuration and get the associated custom context. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>serialized_model_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Serialized representation of the model configuration to use for initialization. This serialization is owned by the caller and so must be copied if a persistent copy of required by the shared library. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serialized_model_config_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of serialized_model_config, in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gpu_device_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPU device ID to initialize for, or CUSTOM_NO_GPU_DEVICE if should initialize for CPU. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>custom_context</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns the opaque handle to the custom state associated with this initialization. Returns nullptr if no context associated with the initialization. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An error code. Zero indicates success, all other values indicate failure. Use CustomErrorString to get the error string for an error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/servables/custom/custom.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="custom_8h_1a9cd799dfef77db82babc6ddd4a4be707" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CustomFinalize</definition>
        <argsstring>(void *custom_context)</argsstring>
        <name>CustomFinalize</name>
        <param>
          <type>void *</type>
          <declname>custom_context</declname>
        </param>
        <briefdescription>
<para>Finalize a custom context. </para>        </briefdescription>
        <detaileddescription>
<para>All state associated with the context should be freed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>custom_context</parametername>
</parameternamelist>
<parameterdescription>
<para>The custom state associated with context that should be freed. Can be nullptr if no custom state. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An error code. Zero indicates success, all other values indicate failure. Use CustomErrorString to get the error string for an error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/servables/custom/custom.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="custom_8h_1aedfdcb69f8eaab594173b197b10dc804" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* CustomErrorString</definition>
        <argsstring>(void *custom_context, int errcode)</argsstring>
        <name>CustomErrorString</name>
        <param>
          <type>void *</type>
          <declname>custom_context</declname>
        </param>
        <param>
          <type>int</type>
          <declname>errcode</declname>
        </param>
        <briefdescription>
<para>Get the string for an error code. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>custom_context</parametername>
</parameternamelist>
<parameterdescription>
<para>The custom state associated with the error code. Can be nullptr if no custom state. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>errcode</parametername>
</parameternamelist>
<parameterdescription>
<para>The error code. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The error code string, or nullptr if the error code has no string representation. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/servables/custom/custom.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="custom_8h_1afc75c0a4e1a169562586c2d4ff09ba40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CustomExecute</definition>
        <argsstring>(void *custom_context, uint32_t payload_cnt, CustomPayload *payloads, CustomGetNextInputFn_t input_fn, CustomGetOutputFn_t output_fn)</argsstring>
        <name>CustomExecute</name>
        <param>
          <type>void *</type>
          <declname>custom_context</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>payload_cnt</declname>
        </param>
        <param>
          <type><ref refid="structcustom__payload__struct" kindref="compound">CustomPayload</ref> *</type>
          <declname>payloads</declname>
        </param>
        <param>
          <type>CustomGetNextInputFn_t</type>
          <declname>input_fn</declname>
        </param>
        <param>
          <type>CustomGetOutputFn_t</type>
          <declname>output_fn</declname>
        </param>
        <briefdescription>
<para>Execute the custom model. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>custom_context</parametername>
</parameternamelist>
<parameterdescription>
<para>The custom state associated with the context that should execute. Can be nullptr if no custom state. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payload_cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of payloads to execute. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payloads</parametername>
</parameternamelist>
<parameterdescription>
<para>The payloads to execute. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback function to get tensor input (see CustomGetNextInputFn_t). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback function to get buffer for tensor output (see CustomGetOutputFn_t). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An error code. Zero indicates success, all other values indicate failure. Use CustomErrorString to get the error string for an error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/servables/custom/custom.h" line="195" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2018-2019,<sp/>NVIDIA<sp/>CORPORATION.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>are<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>NVIDIA<sp/>CORPORATION<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor">#define<sp/>CUSTOM_NO_GPU_DEVICE<sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>payload<sp/>represents<sp/>the<sp/>input<sp/>tensors<sp/>and<sp/>the<sp/>required<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>needed<sp/>for<sp/>execution<sp/>in<sp/>the<sp/>backend.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="structcustom__payload__struct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcustom__payload__struct" kindref="compound">custom_payload_struct</ref><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>size<sp/>of<sp/>the<sp/>batch<sp/>represented<sp/>by<sp/>this<sp/>payload.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>uint32_t<sp/>batch_size;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>of<sp/>inputs<sp/>included<sp/>in<sp/>this<sp/>payload.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>uint32_t<sp/>input_cnt;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>&apos;input_cnt&apos;<sp/>names<sp/>of<sp/>the<sp/>inputs<sp/>included<sp/>in<sp/>this<sp/>payload.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>input_names;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>each<sp/>of<sp/>the<sp/>&apos;input_cnt&apos;<sp/>inputs,<sp/>the<sp/>number<sp/>of<sp/>dimensions<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>input&apos;s<sp/>shape,<sp/>not<sp/>including<sp/>the<sp/>batch<sp/>dimension.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>input_shape_dim_cnts;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>each<sp/>of<sp/>the<sp/>&apos;input_cnt&apos;<sp/>inputs,<sp/>the<sp/>shape<sp/>of<sp/>the<sp/>input,<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>including<sp/>the<sp/>batch<sp/>dimension.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t**<sp/>input_shape_dims;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>of<sp/>outputs<sp/>that<sp/>must<sp/>be<sp/>computed<sp/>for<sp/>this<sp/>payload.<sp/>Can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>0<sp/>to<sp/>indicate<sp/>that<sp/>no<sp/>outputs<sp/>are<sp/>required<sp/>from<sp/>the<sp/>backend.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>uint32_t<sp/>output_cnt;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>&apos;output_cnt&apos;<sp/>names<sp/>of<sp/>the<sp/>outputs<sp/>that<sp/>must<sp/>be<sp/>computed<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>payload.<sp/>Each<sp/>name<sp/>must<sp/>be<sp/>one<sp/>of<sp/>the<sp/>names<sp/>from<sp/>the<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>configuration,<sp/>but<sp/>all<sp/>outputs<sp/>do<sp/>not<sp/>need<sp/>to<sp/>be<sp/>computed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>required_output_names;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>context<sp/>to<sp/>use<sp/>with<sp/>CustomGetNextInput<sp/>callback<sp/>function<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>input<sp/>tensor<sp/>values<sp/>for<sp/>this<sp/>payload.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>input_context;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>context<sp/>to<sp/>use<sp/>with<sp/>CustomGetOutput<sp/>callback<sp/>function<sp/>to<sp/>get</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>buffer<sp/>for<sp/>output<sp/>tensor<sp/>values<sp/>for<sp/>this<sp/>payload.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>output_context;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>error<sp/>code<sp/>indicating<sp/>success<sp/>or<sp/>failure<sp/>from<sp/>execution.<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>value<sp/>of<sp/>0<sp/>(zero)<sp/>indicates<sp/>success,<sp/>all<sp/>other<sp/>values<sp/>indicate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>failure<sp/>and<sp/>are<sp/>backend<sp/>defined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}<sp/><ref refid="structcustom__payload__struct" kindref="compound">CustomPayload</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(*CustomGetNextInputFn_t)(</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>input_context,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>content,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t*<sp/>content_byte_size);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(*CustomGetOutputFn_t)(</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>output_context,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>shape_dim_cnt,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t*<sp/>shape_dims,<sp/>uint64_t<sp/>content_byte_size,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>content);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*CustomInitializeFn_t)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/>size_t,<sp/>int,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*CustomFinalizeFn_t)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>(*CustomErrorStringFn_t)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/>int);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*CustomExecuteFn_t)(</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/>uint32_t,<sp/><ref refid="structcustom__payload__struct" kindref="compound">CustomPayload</ref>*,<sp/>CustomGetNextInputFn_t,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>CustomGetOutputFn_t);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CustomInitialize(</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>serialized_model_config,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>serialized_model_config_size,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpu_device_id,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>custom_context);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CustomFinalize(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>custom_context);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>CustomErrorString(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>custom_context,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errcode);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CustomExecute(</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>custom_context,<sp/>uint32_t<sp/>payload_cnt,<sp/>CustomPayload*<sp/>payloads,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>CustomGetNextInputFn_t<sp/>input_fn,<sp/>CustomGetOutputFn_t<sp/>output_fn);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/servables/custom/custom.h"/>
  </compounddef>
</doxygen>
