<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>nvidia::inferenceserver::client::ServerHealthContext</compoundname>
    <derivedcompoundref refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthGrpcContext" prot="public" virt="non-virtual">nvidia::inferenceserver::client::ServerHealthGrpcContext</derivedcompoundref>
    <derivedcompoundref refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthHttpContext" prot="public" virt="non-virtual">nvidia::inferenceserver::client::ServerHealthHttpContext</derivedcompoundref>
    <includes refid="request_8h" local="no">request.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext_1a85f64722e02a0a62a76984e10e4c43d4" prot="protected" static="no" mutable="no">
        <type>const bool</type>
        <definition>const bool nvidia::inferenceserver::client::ServerHealthContext::verbose_</definition>
        <argsstring></argsstring>
        <name>verbose_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/clients/c++/request.h" line="146" column="1" bodyfile="src/clients/c++/request.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext_1a487bfc16d869317d0f4cb93144311054" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classnvidia_1_1inferenceserver_1_1client_1_1Error" kindref="compound">Error</ref></type>
        <definition>virtual Error nvidia::inferenceserver::client::ServerHealthContext::GetReady</definition>
        <argsstring>(bool *ready)=0</argsstring>
        <name>GetReady</name>
        <reimplementedby refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthHttpContext_1afb0a65b3486407f7ab33f1a43af115da">GetReady</reimplementedby>
        <reimplementedby refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthGrpcContext_1ab7eb83267e0b344b688afd3b70c1498d">GetReady</reimplementedby>
        <param>
          <type>bool *</type>
          <declname>ready</declname>
        </param>
        <briefdescription>
<para>Contact the inference server and get readiness state. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ready</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns the readiness state of the server. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnvidia_1_1inferenceserver_1_1client_1_1Error" kindref="compound">Error</ref> object indicating success or failure of the request. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/clients/c++/request.h" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext_1abf7c75af3e61a2f92b481c47b0617c9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classnvidia_1_1inferenceserver_1_1client_1_1Error" kindref="compound">Error</ref></type>
        <definition>virtual Error nvidia::inferenceserver::client::ServerHealthContext::GetLive</definition>
        <argsstring>(bool *live)=0</argsstring>
        <name>GetLive</name>
        <reimplementedby refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthHttpContext_1ad6c96a9a3dcc20400ce3d610f80497b4">GetLive</reimplementedby>
        <reimplementedby refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthGrpcContext_1a6015f1c052eb2a7a8d161a128d8c62b1">GetLive</reimplementedby>
        <param>
          <type>bool *</type>
          <declname>live</declname>
        </param>
        <briefdescription>
<para>Contact the inference server and get liveness state. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ready</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns the liveness state of the server. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnvidia_1_1inferenceserver_1_1client_1_1Error" kindref="compound">Error</ref> object indicating success or failure of the request. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/clients/c++/request.h" line="140" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext_1ac70a31c16337c59f1ace99658a7e8d37" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nvidia::inferenceserver::client::ServerHealthContext::ServerHealthContext</definition>
        <argsstring>(bool)</argsstring>
        <name>ServerHealthContext</name>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/clients/c++/request.h" line="143" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext" kindref="compound">ServerHealthContext</ref> object is used to query an inference server for health information. </para>    </briefdescription>
    <detaileddescription>
<para>Once created a <ref refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext" kindref="compound">ServerHealthContext</ref> object can be used repeatedly to get health from the server. A <ref refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext" kindref="compound">ServerHealthContext</ref> object can use either HTTP protocol or GRPC protocol depending on the Create function (<ref refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthHttpContext_1a8646eed51789a020f617fe030fa8b1c4" kindref="member">ServerHealthHttpContext::Create</ref> or <ref refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthGrpcContext_1a2929e161d9d4886b48423a48eb83e21a" kindref="member">ServerHealthGrpcContext::Create</ref>). For example:</para><para><programlisting><codeline><highlight class="normal">std::unique_ptr&lt;ServerHealthContext&gt;<sp/>ctx;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ServerHealthHttpContext::Create(&amp;ctx,<sp/>&quot;localhost:8000&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>ready;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ctx-&gt;GetReady(&amp;ready);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>live;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ctx-&gt;GetLive(&amp;live);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>ServerHealthContext::Create methods are thread-safe. <ref refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext_1a487bfc16d869317d0f4cb93144311054" kindref="member">GetReady()</ref> and <ref refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext_1abf7c75af3e61a2f92b481c47b0617c9c" kindref="member">GetLive()</ref> are not thread-safe. For a given <ref refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext" kindref="compound">ServerHealthContext</ref>, calls to <ref refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext_1a487bfc16d869317d0f4cb93144311054" kindref="member">GetReady()</ref> and <ref refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext_1abf7c75af3e61a2f92b481c47b0617c9c" kindref="member">GetLive()</ref> must be serialized. </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="135">
        <label>nvidia::inferenceserver::client::ServerHealthGrpcContext</label>
        <link refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthGrpcContext"/>
        <childnode refid="134" relation="public-inheritance">
        </childnode>
      </node>
      <node id="134">
        <label>nvidia::inferenceserver::client::ServerHealthContext</label>
        <link refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext"/>
      </node>
      <node id="136">
        <label>nvidia::inferenceserver::client::ServerHealthHttpContext</label>
        <link refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthHttpContext"/>
        <childnode refid="134" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="src/clients/c++/request.h" line="130" column="1" bodyfile="src/clients/c++/request.h" bodystart="130" bodyend="147"/>
    <listofallmembers>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext_1abf7c75af3e61a2f92b481c47b0617c9c" prot="public" virt="pure-virtual"><scope>nvidia::inferenceserver::client::ServerHealthContext</scope><name>GetLive</name></member>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext_1a487bfc16d869317d0f4cb93144311054" prot="public" virt="pure-virtual"><scope>nvidia::inferenceserver::client::ServerHealthContext</scope><name>GetReady</name></member>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext_1ac70a31c16337c59f1ace99658a7e8d37" prot="protected" virt="non-virtual"><scope>nvidia::inferenceserver::client::ServerHealthContext</scope><name>ServerHealthContext</name></member>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ServerHealthContext_1a85f64722e02a0a62a76984e10e4c43d4" prot="protected" virt="non-virtual"><scope>nvidia::inferenceserver::client::ServerHealthContext</scope><name>verbose_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
