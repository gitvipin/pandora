<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classnvidia_1_1inferenceserver_1_1client_1_1ProfileHttpContext" kind="class" language="C++" prot="public">
    <compoundname>nvidia::inferenceserver::client::ProfileHttpContext</compoundname>
    <basecompoundref refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext" prot="public" virt="non-virtual">nvidia::inferenceserver::client::ProfileContext</basecompoundref>
    <includes refid="request_8h" local="no">request.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnvidia_1_1inferenceserver_1_1client_1_1ProfileHttpContext_1af82718964414858e226c50d3b4c23d32" prot="private" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string nvidia::inferenceserver::client::ProfileHttpContext::url_</definition>
        <argsstring></argsstring>
        <name>url_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/clients/c++/request.h" line="987" column="1" bodyfile="src/clients/c++/request.h" bodystart="987" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnvidia_1_1inferenceserver_1_1client_1_1ProfileHttpContext_1ab55dfbfe2cc3b890b008bc99196fc260" prot="private" static="no" mutable="no">
        <type>RequestStatus</type>
        <definition>RequestStatus nvidia::inferenceserver::client::ProfileHttpContext::request_status_</definition>
        <argsstring></argsstring>
        <name>request_status_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/clients/c++/request.h" line="990" column="1" bodyfile="src/clients/c++/request.h" bodystart="990" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classnvidia_1_1inferenceserver_1_1client_1_1ProfileHttpContext_1a5a4cab76d0a3f8af074883be690ca8d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnvidia_1_1inferenceserver_1_1client_1_1Error" kindref="compound">Error</ref></type>
        <definition>static Error nvidia::inferenceserver::client::ProfileHttpContext::Create</definition>
        <argsstring>(std::unique_ptr&lt; ProfileContext &gt; *ctx, const std::string &amp;server_url, bool verbose=false)</argsstring>
        <name>Create</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext" kindref="compound">ProfileContext</ref> &gt; *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>server_url</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Create context that controls profiling on a server using HTTP protocol. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns the new <ref refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext" kindref="compound">ProfileContext</ref> object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>server_url</parametername>
</parameternamelist>
<parameterdescription>
<para>The inference server name and port. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbose</parametername>
</parameternamelist>
<parameterdescription>
<para>If true generate verbose output when contacting the inference server. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnvidia_1_1inferenceserver_1_1client_1_1Error" kindref="compound">Error</ref> object indicating success or failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/clients/c++/request.h" line="976" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classnvidia_1_1inferenceserver_1_1client_1_1ProfileHttpContext_1ae569d8c8888eaf1118ba7c88bea08be3" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t nvidia::inferenceserver::client::ProfileHttpContext::ResponseHeaderHandler</definition>
        <argsstring>(void *, size_t, size_t, void *)</argsstring>
        <name>ResponseHeaderHandler</name>
        <param>
          <type>void *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/clients/c++/request.h" line="981" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnvidia_1_1inferenceserver_1_1client_1_1ProfileHttpContext_1a1dd8a053cf78c04c6373d04df0de4449" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nvidia::inferenceserver::client::ProfileHttpContext::ProfileHttpContext</definition>
        <argsstring>(const std::string &amp;, bool)</argsstring>
        <name>ProfileHttpContext</name>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/clients/c++/request.h" line="983" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classnvidia_1_1inferenceserver_1_1client_1_1ProfileHttpContext_1aa7528d100f641dd78b9ccb14c439330f" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classnvidia_1_1inferenceserver_1_1client_1_1Error" kindref="compound">Error</ref></type>
        <definition>Error nvidia::inferenceserver::client::ProfileHttpContext::SendCommand</definition>
        <argsstring>(const std::string &amp;cmd_str) override</argsstring>
        <name>SendCommand</name>
        <reimplements refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext_1a9e56d2aaa5f73cbc20a17c189cdbecff">SendCommand</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>cmd_str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/clients/c++/request.h" line="984" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileHttpContext" kindref="compound">ProfileHttpContext</ref> is the HTTP instantiation of <ref refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext" kindref="compound">ProfileContext</ref>. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="124">
        <label>nvidia::inferenceserver::client::ProfileHttpContext</label>
        <link refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileHttpContext"/>
        <childnode refid="125" relation="public-inheritance">
        </childnode>
      </node>
      <node id="125">
        <label>nvidia::inferenceserver::client::ProfileContext</label>
        <link refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="126">
        <label>nvidia::inferenceserver::client::ProfileHttpContext</label>
        <link refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileHttpContext"/>
        <childnode refid="127" relation="public-inheritance">
        </childnode>
      </node>
      <node id="127">
        <label>nvidia::inferenceserver::client::ProfileContext</label>
        <link refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext"/>
      </node>
    </collaborationgraph>
    <location file="src/clients/c++/request.h" line="967" column="1" bodyfile="src/clients/c++/request.h" bodystart="967" bodyend="991"/>
    <listofallmembers>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileHttpContext_1a5a4cab76d0a3f8af074883be690ca8d5" prot="public" virt="non-virtual"><scope>nvidia::inferenceserver::client::ProfileHttpContext</scope><name>Create</name></member>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext_1a7781bbb5753b2fe3df63b2c67f481bda" prot="protected" virt="non-virtual"><scope>nvidia::inferenceserver::client::ProfileHttpContext</scope><name>ProfileContext</name></member>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileHttpContext_1a1dd8a053cf78c04c6373d04df0de4449" prot="private" virt="non-virtual"><scope>nvidia::inferenceserver::client::ProfileHttpContext</scope><name>ProfileHttpContext</name></member>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileHttpContext_1ab55dfbfe2cc3b890b008bc99196fc260" prot="private" virt="non-virtual"><scope>nvidia::inferenceserver::client::ProfileHttpContext</scope><name>request_status_</name></member>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileHttpContext_1ae569d8c8888eaf1118ba7c88bea08be3" prot="private" virt="non-virtual"><scope>nvidia::inferenceserver::client::ProfileHttpContext</scope><name>ResponseHeaderHandler</name></member>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileHttpContext_1aa7528d100f641dd78b9ccb14c439330f" prot="private" virt="virtual"><scope>nvidia::inferenceserver::client::ProfileHttpContext</scope><name>SendCommand</name></member>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext_1a1ab52943642937237a61474900c3e063" prot="public" virt="non-virtual"><scope>nvidia::inferenceserver::client::ProfileHttpContext</scope><name>StartProfile</name></member>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext_1a70de85f4829ce4042c3696a3fdf2f091" prot="public" virt="non-virtual"><scope>nvidia::inferenceserver::client::ProfileHttpContext</scope><name>StopProfile</name></member>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileHttpContext_1af82718964414858e226c50d3b4c23d32" prot="private" virt="non-virtual"><scope>nvidia::inferenceserver::client::ProfileHttpContext</scope><name>url_</name></member>
      <member refid="classnvidia_1_1inferenceserver_1_1client_1_1ProfileContext_1a37bff4c6755f5c2be784b195658781e0" prot="protected" virt="non-virtual"><scope>nvidia::inferenceserver::client::ProfileHttpContext</scope><name>verbose_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
